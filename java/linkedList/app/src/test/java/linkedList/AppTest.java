package linkedList;

//import org.junit.jupiter.api.Test;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
//import org.testng.annotations.Test;

//import org.junit.jupiter.api.Test;
//import static org.junit.jupiter.api.Assertions.assertEquals;


public class AppTest {
//
//  @Test
//  public void testLinkList() {
//
//    LinkedList list = new LinkedList();
//    list.append(1);
//    assertEquals("append new node", "{ 1 } -> ", list.toString());
//
//
//    LinkedList list3 = new LinkedList();
//    list3.append(1);
//    list3.append(2);
//    list3.append(4);
//    list3.insertBefore(4, 3);
//    assertEquals("insert before", "{ 1 } -> { 2 } -> { 3 } -> { 4 } -> ", list3.toString());
//
//
//    LinkedList list4 = new LinkedList();
//    list4.append(1);
//    list4.append(3);
//    list4.append(2);
//    list4.append(5);
//
//
//    list3.insertAfter(2, 100);
//    assertEquals("insert before", "{ 1 } -> { 2 } -> { 100 } -> { 3 } -> { 4 } -> ", list3.toString());
//  }
//  ////////////////////////test code 7 ////////////////
//
//
//  //Where k is greater than the length of the linked list
//  @Test
//  public void testLinkedListKth_KGreaterLength() {
//    LinkedList listKth = new LinkedList();
//    listKth.append(1);
//    listKth.append(2);
//    listKth.append(3);
//    listKth.append(4);
//    listKth.append(5);
//    listKth.append(6);
//    listKth.append(7);
//    listKth.append(8);
//    listKth.append(9);
//    listKth.append(10);
//
//    assertEquals("testLinkedListKth_KGreaterLength", "number out of the range", listKth.linkedListKth(10)
//    );
//  }
////
////  //Where k and the length of the list are the same
//  @Test
//  public void testLinkedListKth_kEqualLength() {
//    LinkedList listKth = new LinkedList();
//    listKth.append(1);
//    listKth.append(2);
//    listKth.append(3);
//    listKth.append(4);
//    listKth.append(5);
//    listKth.append(6);
//    listKth.append(7);
//    listKth.append(8);
//    listKth.append(9);
//    listKth.append(10);
//
//    assertEquals("testLinkedListKth_kEqualLength", "1", listKth.linkedListKth(9)
//    );
//  }
//
////  //Where k is not a positive integer
//  @Test
//  public void testLinkedListKth_kNegative() {
//    LinkedList listKth = new LinkedList();
//    listKth.append(1);
//    listKth.append(2);
//    listKth.append(3);
//    listKth.append(4);
//    listKth.append(5);
//    listKth.append(6);
//    listKth.append(7);
//    listKth.append(8);
//    listKth.append(9);
//    listKth.append(10);
//
//    assertEquals("testLinkedListKth_kNegative", "number out of the range", listKth.linkedListKth(-5)
//    );
//  }
//
////  //Where the linked list is of a size 1
////
//  @Test
//  public void testLinkedListKth_kSize() {
//    LinkedList listKth = new LinkedList();
//    listKth.append(1);
//
//    assertEquals("testLinkedListKth_kSize", "1", listKth.linkedListKth(0)
//    );
//  }
//
////  //“Happy Path” where k is not at the end, but somewhere in the middle of the linked list
//  @Test
//  public void testKthFromEndMethod5() throws Exception {
//    LinkedList listKth = new LinkedList();
//    listKth.append(1);
//    listKth.append(2);
//    listKth.append(3);
//    listKth.append(4);
//    listKth.append(5);
//    listKth.append(6);
//    listKth.append(7);
//    listKth.append(8);
//    listKth.append(9);
//    listKth.append(10);
//    assertEquals("testLinkedListKth_kNegative", "5", listKth.linkedListKth(5));
//  }

  }





